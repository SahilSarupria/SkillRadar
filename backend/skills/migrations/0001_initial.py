# Generated by Django 4.2.7 on 2025-08-17 14:15

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('analyzer', '0001_initial'),
        ('resumes', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='JobRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('industry', models.CharField(max_length=100)),
                ('level', models.CharField(choices=[('entry', 'Entry Level'), ('mid', 'Mid Level'), ('senior', 'Senior Level'), ('lead', 'Lead/Principal'), ('executive', 'Executive')], max_length=50)),
                ('description', models.TextField(blank=True)),
                ('average_salary_min', models.PositiveIntegerField(default=0)),
                ('average_salary_max', models.PositiveIntegerField(default=0)),
                ('job_growth_rate', models.FloatField(default=0.0, help_text='Annual job growth rate percentage')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['industry', 'title', 'level'],
            },
        ),
        migrations.CreateModel(
            name='LearningPath',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('difficulty_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('expert', 'Expert')], max_length=20)),
                ('estimated_duration_weeks', models.PositiveIntegerField(default=12)),
                ('estimated_hours_per_week', models.PositiveIntegerField(default=5)),
                ('status', models.CharField(choices=[('not_started', 'Not Started'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('paused', 'Paused')], default='not_started', max_length=20)),
                ('progress_percentage', models.FloatField(default=0.0)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('skill_type', models.CharField(choices=[('technical', 'Technical'), ('soft', 'Soft Skill'), ('language', 'Language'), ('certification', 'Certification'), ('tool', 'Tool/Software')], max_length=20)),
                ('description', models.TextField(blank=True)),
                ('aliases', models.JSONField(default=list, help_text='Alternative names for this skill')),
                ('industries', models.JSONField(default=list, help_text='Industries where this skill is relevant')),
                ('job_roles', models.JSONField(default=list, help_text='Job roles that require this skill')),
                ('difficulty_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('expert', 'Expert')], default='intermediate', max_length=20)),
                ('average_learning_time_hours', models.PositiveIntegerField(default=40, help_text='Average hours to learn')),
                ('demand_score', models.FloatField(default=50.0, help_text='Market demand score (0-100)')),
                ('popularity_score', models.FloatField(default=50.0, help_text='Popularity score (0-100)')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='SkillCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('icon', models.CharField(blank=True, help_text='Icon class or name', max_length=50)),
                ('color', models.CharField(default='#3B82F6', help_text='Hex color code', max_length=7)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'Skill Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='SkillGapAnalysis',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('target_job_title', models.CharField(max_length=200)),
                ('target_industry', models.CharField(max_length=100)),
                ('target_level', models.CharField(choices=[('entry', 'Entry Level'), ('mid', 'Mid Level'), ('senior', 'Senior Level'), ('lead', 'Lead/Principal'), ('executive', 'Executive')], max_length=50)),
                ('overall_match_score', models.FloatField(default=0.0, help_text='Overall skill match percentage')),
                ('skills_matched', models.PositiveIntegerField(default=0)),
                ('skills_missing', models.PositiveIntegerField(default=0)),
                ('skills_to_improve', models.PositiveIntegerField(default=0)),
                ('analysis_data', models.JSONField(default=dict, help_text='Detailed gap analysis results')),
                ('recommendations', models.JSONField(default=list, help_text='Skill development recommendations')),
                ('learning_path', models.JSONField(default=list, help_text='Suggested learning path')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('processing_time', models.FloatField(default=0.0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('resume', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='resumes.resume')),
                ('resume_analysis', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='analyzer.resumeanalysis')),
                ('target_job_role', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='skills.jobrole')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='skill_gap_analyses', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SkillGap',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gap_type', models.CharField(choices=[('missing', 'Missing Skill'), ('insufficient', 'Insufficient Proficiency'), ('outdated', 'Outdated Knowledge'), ('improvement', 'Needs Improvement')], max_length=20)),
                ('current_level', models.CharField(blank=True, choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('expert', 'Expert')], max_length=20, null=True)),
                ('required_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('expert', 'Expert')], max_length=20)),
                ('importance', models.CharField(choices=[('required', 'Required'), ('preferred', 'Preferred'), ('nice_to_have', 'Nice to Have')], max_length=20)),
                ('gap_score', models.FloatField(default=0.0, help_text='Gap severity score (0-100)')),
                ('priority', models.CharField(choices=[('low', 'Low Priority'), ('medium', 'Medium Priority'), ('high', 'High Priority'), ('critical', 'Critical')], default='medium', max_length=20)),
                ('estimated_learning_time', models.PositiveIntegerField(default=0, help_text='Estimated hours to close gap')),
                ('learning_resources', models.JSONField(default=list, help_text='Recommended learning resources')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('analysis', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='skill_gaps', to='skills.skillgapanalysis')),
                ('skill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='skills.skill')),
            ],
            options={
                'ordering': ['-gap_score', 'skill__name'],
            },
        ),
        migrations.CreateModel(
            name='SkillAssessment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('assessment_type', models.CharField(choices=[('self_assessment', 'Self Assessment'), ('quiz', 'Quiz'), ('practical', 'Practical Test'), ('project', 'Project-based')], max_length=20)),
                ('score', models.FloatField(default=0.0, help_text='Assessment score (0-100)')),
                ('proficiency_determined', models.CharField(blank=True, choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('expert', 'Expert')], max_length=20)),
                ('questions_total', models.PositiveIntegerField(default=0)),
                ('questions_correct', models.PositiveIntegerField(default=0)),
                ('time_taken_minutes', models.PositiveIntegerField(default=0)),
                ('assessment_data', models.JSONField(default=dict, help_text='Detailed assessment results')),
                ('feedback', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('skill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='skills.skill')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='skill_assessments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='skill',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='skills', to='skills.skillcategory'),
        ),
        migrations.AddField(
            model_name='skill',
            name='prerequisites',
            field=models.ManyToManyField(blank=True, related_name='dependent_skills', to='skills.skill'),
        ),
        migrations.CreateModel(
            name='LearningPathStep',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('order', models.PositiveIntegerField()),
                ('estimated_hours', models.PositiveIntegerField(default=10)),
                ('resources', models.JSONField(default=list, help_text='Learning resources for this step')),
                ('is_completed', models.BooleanField(default=False)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('learning_path', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='steps', to='skills.learningpath')),
                ('prerequisites', models.ManyToManyField(blank=True, to='skills.learningpathstep')),
                ('skill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='skills.skill')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.AddField(
            model_name='learningpath',
            name='skill_gap_analysis',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='skills.skillgapanalysis'),
        ),
        migrations.AddField(
            model_name='learningpath',
            name='target_skills',
            field=models.ManyToManyField(related_name='learning_paths', to='skills.skill'),
        ),
        migrations.AddField(
            model_name='learningpath',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='learning_paths', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='JobRoleSkill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('importance', models.CharField(choices=[('required', 'Required'), ('preferred', 'Preferred'), ('nice_to_have', 'Nice to Have')], default='required', max_length=20)),
                ('min_proficiency', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('expert', 'Expert')], default='intermediate', max_length=20)),
                ('weight', models.FloatField(default=1.0, help_text='Importance weight (0-10)')),
                ('job_role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='skills.jobrole')),
                ('skill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='skills.skill')),
            ],
        ),
        migrations.AddField(
            model_name='jobrole',
            name='required_skills',
            field=models.ManyToManyField(related_name='required_for_roles', through='skills.JobRoleSkill', to='skills.skill'),
        ),
        migrations.CreateModel(
            name='UserSkill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('proficiency_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('expert', 'Expert')], max_length=20)),
                ('is_verified', models.BooleanField(default=False)),
                ('verification_method', models.CharField(blank=True, choices=[('self_assessed', 'Self Assessed'), ('resume_extracted', 'Extracted from Resume'), ('test_verified', 'Test Verified'), ('certification', 'Certification'), ('experience', 'Work Experience')], max_length=50)),
                ('years_of_experience', models.FloatField(default=0.0)),
                ('last_used', models.DateField(blank=True, null=True)),
                ('learning_status', models.CharField(choices=[('not_started', 'Not Started'), ('learning', 'Currently Learning'), ('proficient', 'Proficient'), ('mastered', 'Mastered')], default='proficient', max_length=20)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('skill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='skills.skill')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='skills', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-proficiency_level', 'skill__name'],
                'unique_together': {('user', 'skill')},
            },
        ),
        migrations.AddIndex(
            model_name='skillgapanalysis',
            index=models.Index(fields=['user', '-created_at'], name='skills_skil_user_id_0de3e6_idx'),
        ),
        migrations.AddIndex(
            model_name='skillgapanalysis',
            index=models.Index(fields=['status'], name='skills_skil_status_5cda32_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='skillgap',
            unique_together={('analysis', 'skill')},
        ),
        migrations.AddIndex(
            model_name='skill',
            index=models.Index(fields=['skill_type'], name='skills_skil_skill_t_2f9275_idx'),
        ),
        migrations.AddIndex(
            model_name='skill',
            index=models.Index(fields=['category'], name='skills_skil_categor_292d4b_idx'),
        ),
        migrations.AddIndex(
            model_name='skill',
            index=models.Index(fields=['demand_score'], name='skills_skil_demand__870789_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='learningpathstep',
            unique_together={('learning_path', 'order')},
        ),
        migrations.AlterUniqueTogether(
            name='jobroleskill',
            unique_together={('job_role', 'skill')},
        ),
        migrations.AlterUniqueTogether(
            name='jobrole',
            unique_together={('title', 'industry', 'level')},
        ),
    ]
