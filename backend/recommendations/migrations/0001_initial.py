# Generated by Django 4.2.7 on 2025-08-17 14:14

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('skills', '__first__'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('external_id', models.CharField(help_text='Course ID on the platform', max_length=200)),
                ('title', models.CharField(max_length=300)),
                ('slug', models.SlugField(max_length=350, unique=True)),
                ('description', models.TextField()),
                ('short_description', models.CharField(blank=True, max_length=500)),
                ('instructor_name', models.CharField(max_length=200)),
                ('instructor_bio', models.TextField(blank=True)),
                ('language', models.CharField(default='English', max_length=50)),
                ('level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('all_levels', 'All Levels')], max_length=20)),
                ('duration_hours', models.FloatField(help_text='Course duration in hours')),
                ('total_lectures', models.PositiveIntegerField(default=0)),
                ('has_assignments', models.BooleanField(default=False)),
                ('has_projects', models.BooleanField(default=False)),
                ('has_certificate', models.BooleanField(default=False)),
                ('topics', models.JSONField(default=list, help_text='List of topics covered')),
                ('prerequisites', models.JSONField(default=list, help_text='Course prerequisites')),
                ('is_free', models.BooleanField(default=False)),
                ('price', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('currency', models.CharField(default='USD', max_length=3)),
                ('discount_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('rating', models.FloatField(default=0.0, help_text='Course rating (0-5)')),
                ('total_reviews', models.PositiveIntegerField(default=0)),
                ('total_students', models.PositiveIntegerField(default=0)),
                ('course_url', models.URLField()),
                ('thumbnail_url', models.URLField(blank=True)),
                ('preview_video_url', models.URLField(blank=True)),
                ('last_updated', models.DateTimeField()),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-rating', '-total_students'],
            },
        ),
        migrations.CreateModel(
            name='CourseRecommendation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('recommendation_reason', models.TextField(help_text='Why this course was recommended')),
                ('relevance_score', models.FloatField(default=0.0, help_text='How relevant this course is (0-100)')),
                ('recommendation_type', models.CharField(choices=[('skill_gap', 'Skill Gap Based'), ('career_path', 'Career Path'), ('trending', 'Trending Course'), ('similar_users', 'Similar Users'), ('ai_suggested', 'AI Suggested')], max_length=50)),
                ('priority', models.CharField(choices=[('low', 'Low Priority'), ('medium', 'Medium Priority'), ('high', 'High Priority'), ('urgent', 'Urgent')], default='medium', max_length=20)),
                ('is_viewed', models.BooleanField(default=False)),
                ('is_bookmarked', models.BooleanField(default=False)),
                ('is_enrolled', models.BooleanField(default=False)),
                ('is_dismissed', models.BooleanField(default=False)),
                ('viewed_at', models.DateTimeField(blank=True, null=True)),
                ('bookmarked_at', models.DateTimeField(blank=True, null=True)),
                ('enrolled_at', models.DateTimeField(blank=True, null=True)),
                ('dismissed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='recommendations.course')),
                ('learning_path', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='skills.learningpath')),
                ('skill_gap_analysis', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='skills.skillgapanalysis')),
                ('target_skill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='skills.skill')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_recommendations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-relevance_score', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='GoalCourseRecommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(help_text='Recommended order in learning path')),
                ('is_required', models.BooleanField(default=False, help_text='Is this course required for the goal')),
                ('relevance_score', models.FloatField(default=0.0)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='recommendations.course')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='LearningPlatform',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('website_url', models.URLField()),
                ('api_endpoint', models.URLField(blank=True, help_text='API endpoint for course data')),
                ('logo_url', models.URLField(blank=True)),
                ('platform_type', models.CharField(choices=[('mooc', 'MOOC (Massive Open Online Course)'), ('bootcamp', 'Coding Bootcamp'), ('university', 'University/Academic'), ('corporate', 'Corporate Training'), ('tutorial', 'Tutorial Platform'), ('certification', 'Certification Provider')], max_length=50)),
                ('has_free_courses', models.BooleanField(default=True)),
                ('has_paid_courses', models.BooleanField(default=True)),
                ('has_certificates', models.BooleanField(default=True)),
                ('has_degrees', models.BooleanField(default=False)),
                ('api_key_required', models.BooleanField(default=False)),
                ('affiliate_program', models.BooleanField(default=False)),
                ('affiliate_id', models.CharField(blank=True, max_length=200)),
                ('average_rating', models.FloatField(default=4.0, help_text='Average platform rating')),
                ('total_courses', models.PositiveIntegerField(default=0)),
                ('total_students', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='PlatformIntegration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('api_key', models.CharField(blank=True, max_length=500)),
                ('api_secret', models.CharField(blank=True, max_length=500)),
                ('access_token', models.TextField(blank=True)),
                ('refresh_token', models.TextField(blank=True)),
                ('is_enabled', models.BooleanField(default=True)),
                ('sync_frequency_hours', models.PositiveIntegerField(default=24, help_text='How often to sync course data')),
                ('last_sync', models.DateTimeField(blank=True, null=True)),
                ('requests_per_minute', models.PositiveIntegerField(default=60)),
                ('requests_per_day', models.PositiveIntegerField(default=10000)),
                ('last_error', models.TextField(blank=True)),
                ('error_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('platform', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='integration', to='recommendations.learningplatform')),
            ],
        ),
        migrations.CreateModel(
            name='LearningGoal',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('goal_type', models.CharField(choices=[('career_change', 'Career Change'), ('skill_upgrade', 'Skill Upgrade'), ('certification', 'Get Certified'), ('promotion', 'Job Promotion'), ('personal', 'Personal Interest')], max_length=50)),
                ('priority', models.CharField(choices=[('low', 'Low Priority'), ('medium', 'Medium Priority'), ('high', 'High Priority')], default='medium', max_length=20)),
                ('target_completion_date', models.DateField(blank=True, null=True)),
                ('estimated_hours_per_week', models.PositiveIntegerField(default=5)),
                ('status', models.CharField(choices=[('active', 'Active'), ('paused', 'Paused'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='active', max_length=20)),
                ('progress_percentage', models.FloatField(default=0.0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('recommended_courses', models.ManyToManyField(blank=True, through='recommendations.GoalCourseRecommendation', to='recommendations.course')),
                ('target_skills', models.ManyToManyField(related_name='learning_goals', to='skills.skill')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='learning_goals', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-priority', '-created_at'],
            },
        ),
        migrations.AddField(
            model_name='goalcourserecommendation',
            name='learning_goal',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='recommendations.learninggoal'),
        ),
        migrations.AddField(
            model_name='course',
            name='platform',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='courses', to='recommendations.learningplatform'),
        ),
        migrations.AddField(
            model_name='course',
            name='skills_taught',
            field=models.ManyToManyField(blank=True, related_name='courses', to='skills.skill'),
        ),
        migrations.CreateModel(
            name='AffiliateClick',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('clicked_at', models.DateTimeField(auto_now_add=True)),
                ('referrer_url', models.URLField(blank=True, null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='affiliate_clicks', to='recommendations.course')),
                ('platform', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='affiliate_clicks', to='recommendations.learningplatform')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-clicked_at'],
            },
        ),
        migrations.CreateModel(
            name='UserCourseProgress',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('not_started', 'Not Started'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('paused', 'Paused'), ('dropped', 'Dropped')], default='not_started', max_length=20)),
                ('progress_percentage', models.FloatField(default=0.0, help_text='Progress percentage (0-100)')),
                ('lectures_completed', models.PositiveIntegerField(default=0)),
                ('assignments_completed', models.PositiveIntegerField(default=0)),
                ('projects_completed', models.PositiveIntegerField(default=0)),
                ('total_time_spent_minutes', models.PositiveIntegerField(default=0)),
                ('last_accessed', models.DateTimeField(blank=True, null=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('certificate_earned', models.BooleanField(default=False)),
                ('certificate_url', models.URLField(blank=True)),
                ('user_rating', models.FloatField(blank=True, help_text="User's rating of the course (1-5)", null=True)),
                ('user_review', models.TextField(blank=True)),
                ('would_recommend', models.BooleanField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='recommendations.course')),
                ('recommendation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='recommendations.courserecommendation')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_progress', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-last_accessed', '-created_at'],
                'unique_together': {('user', 'course')},
            },
        ),
        migrations.CreateModel(
            name='LearningPathRecommendation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('recommendation_reason', models.TextField()),
                ('relevance_score', models.FloatField(default=0.0)),
                ('estimated_completion_weeks', models.PositiveIntegerField()),
                ('estimated_cost', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('is_viewed', models.BooleanField(default=False)),
                ('is_started', models.BooleanField(default=False)),
                ('is_dismissed', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('learning_path', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='skills.learningpath')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='path_recommendations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-relevance_score', '-created_at'],
                'unique_together': {('user', 'learning_path')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='goalcourserecommendation',
            unique_together={('learning_goal', 'course')},
        ),
        migrations.CreateModel(
            name='CourseReview',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('rating', models.FloatField(help_text='Rating from 1-5')),
                ('title', models.CharField(blank=True, max_length=200)),
                ('review_text', models.TextField()),
                ('content_quality', models.FloatField(blank=True, help_text='Content quality rating (1-5)', null=True)),
                ('instructor_quality', models.FloatField(blank=True, help_text='Instructor quality rating (1-5)', null=True)),
                ('value_for_money', models.FloatField(blank=True, help_text='Value for money rating (1-5)', null=True)),
                ('is_verified_purchase', models.BooleanField(default=False)),
                ('is_helpful', models.BooleanField(default=False)),
                ('helpful_votes', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_reviews', to='recommendations.course')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_reviews', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('user', 'course')},
            },
        ),
        migrations.AddIndex(
            model_name='courserecommendation',
            index=models.Index(fields=['user', '-relevance_score'], name='recommendat_user_id_7f85bb_idx'),
        ),
        migrations.AddIndex(
            model_name='courserecommendation',
            index=models.Index(fields=['recommendation_type'], name='recommendat_recomme_5915df_idx'),
        ),
        migrations.AddIndex(
            model_name='courserecommendation',
            index=models.Index(fields=['priority'], name='recommendat_priorit_0d1dff_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='courserecommendation',
            unique_together={('user', 'course', 'target_skill')},
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['platform', 'level'], name='recommendat_platfor_be73f6_idx'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['is_free', 'rating'], name='recommendat_is_free_ed7637_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='course',
            unique_together={('platform', 'external_id')},
        ),
    ]
