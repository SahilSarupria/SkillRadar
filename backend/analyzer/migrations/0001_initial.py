# Generated by Django 4.2.7 on 2025-08-17 14:14

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('resumes', '__first__'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AnalysisTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('industry', models.CharField(max_length=100)),
                ('job_role', models.CharField(blank=True, max_length=200)),
                ('required_keywords', models.JSONField(default=list, help_text='Keywords that should be present')),
                ('preferred_keywords', models.JSONField(default=list, help_text='Keywords that are nice to have')),
                ('required_sections', models.JSONField(default=list, help_text='Resume sections that must be present')),
                ('scoring_weights', models.JSONField(default=dict, help_text='Weights for different scoring criteria')),
                ('min_experience_years', models.PositiveIntegerField(default=0)),
                ('preferred_education_level', models.CharField(blank=True, max_length=100)),
                ('key_skills', models.JSONField(default=list, help_text='Key skills for this role/industry')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['industry', 'job_role'],
            },
        ),
        migrations.CreateModel(
            name='ResumeAnalysis',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('analysis_type', models.CharField(choices=[('ats_scan', 'ATS Compatibility Scan'), ('content_analysis', 'Content Analysis'), ('keyword_analysis', 'Keyword Analysis'), ('format_analysis', 'Format Analysis'), ('industry_analysis', 'Industry-Specific Analysis')], max_length=50)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('overall_score', models.FloatField(default=0.0, help_text='Overall score out of 100')),
                ('ats_score', models.FloatField(default=0.0, help_text='ATS compatibility score out of 100')),
                ('content_score', models.FloatField(default=0.0, help_text='Content quality score out of 100')),
                ('format_score', models.FloatField(default=0.0, help_text='Format score out of 100')),
                ('keyword_score', models.FloatField(default=0.0, help_text='Keyword optimization score out of 100')),
                ('analysis_data', models.JSONField(default=dict, help_text='Detailed analysis results')),
                ('suggestions', models.JSONField(default=list, help_text='Improvement suggestions')),
                ('strengths', models.JSONField(default=list, help_text='Resume strengths')),
                ('weaknesses', models.JSONField(default=list, help_text='Areas for improvement')),
                ('processing_time', models.FloatField(default=0.0)),
                ('target_job_title', models.CharField(blank=True, help_text='Target job for analysis', max_length=200)),
                ('target_industry', models.CharField(blank=True, help_text='Target industry', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('resume', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='analyses', to='resumes.resume')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resume_analyses', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='KeywordAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('found_keywords', models.JSONField(default=list, help_text='Keywords found in resume')),
                ('missing_keywords', models.JSONField(default=list, help_text='Important keywords missing')),
                ('keyword_density', models.JSONField(default=dict, help_text='Keyword frequency analysis')),
                ('industry_keywords', models.JSONField(default=list, help_text='Industry-specific keywords')),
                ('skill_keywords', models.JSONField(default=list, help_text='Technical skill keywords')),
                ('keyword_match_percentage', models.FloatField(default=0.0)),
                ('industry_relevance_score', models.FloatField(default=0.0)),
                ('skill_coverage_score', models.FloatField(default=0.0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('analysis', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='keyword_analysis', to='analyzer.resumeanalysis')),
            ],
        ),
        migrations.CreateModel(
            name='IndustryAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('detected_industries', models.JSONField(default=list, help_text='Industries the resume fits')),
                ('industry_match_scores', models.JSONField(default=dict, help_text='Match scores for different industries')),
                ('target_industry_fit', models.FloatField(default=0.0, help_text='Fit score for target industry')),
                ('required_skills_present', models.JSONField(default=list, help_text='Required skills found')),
                ('missing_skills', models.JSONField(default=list, help_text='Important skills missing')),
                ('industry_keywords_found', models.JSONField(default=list, help_text='Industry keywords found')),
                ('industry_specific_tips', models.JSONField(default=list, help_text='Industry-specific improvement tips')),
                ('role_alignment_score', models.FloatField(default=0.0, help_text='Alignment with target role')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('analysis', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='industry_analysis', to='analyzer.resumeanalysis')),
            ],
        ),
        migrations.CreateModel(
            name='ContentAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('word_count', models.PositiveIntegerField(default=0)),
                ('sentence_count', models.PositiveIntegerField(default=0)),
                ('paragraph_count', models.PositiveIntegerField(default=0)),
                ('bullet_points_count', models.PositiveIntegerField(default=0)),
                ('readability_score', models.FloatField(default=0.0, help_text='Flesch reading ease score')),
                ('action_verbs_count', models.PositiveIntegerField(default=0)),
                ('quantified_achievements', models.PositiveIntegerField(default=0)),
                ('tone_analysis', models.JSONField(default=dict, help_text='Professional tone analysis')),
                ('grammar_issues', models.JSONField(default=list, help_text='Grammar and spelling issues')),
                ('content_suggestions', models.JSONField(default=list, help_text='Content improvement suggestions')),
                ('section_completeness', models.JSONField(default=dict, help_text='Completeness of each section')),
                ('section_quality_scores', models.JSONField(default=dict, help_text='Quality score for each section')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('analysis', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='content_analysis', to='analyzer.resumeanalysis')),
            ],
        ),
        migrations.CreateModel(
            name='ATSCompatibility',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('has_contact_info', models.BooleanField(default=False)),
                ('has_clear_sections', models.BooleanField(default=False)),
                ('uses_standard_fonts', models.BooleanField(default=False)),
                ('has_keywords', models.BooleanField(default=False)),
                ('proper_formatting', models.BooleanField(default=False)),
                ('no_images_or_graphics', models.BooleanField(default=False)),
                ('readable_file_format', models.BooleanField(default=False)),
                ('formatting_issues', models.JSONField(default=list, help_text='List of formatting issues')),
                ('missing_sections', models.JSONField(default=list, help_text='Missing resume sections')),
                ('optimization_tips', models.JSONField(default=list, help_text='ATS optimization tips')),
                ('readability_score', models.FloatField(default=0.0)),
                ('structure_score', models.FloatField(default=0.0)),
                ('content_extraction_score', models.FloatField(default=0.0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('analysis', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='ats_compatibility', to='analyzer.resumeanalysis')),
            ],
        ),
        migrations.AddIndex(
            model_name='resumeanalysis',
            index=models.Index(fields=['user', '-created_at'], name='analyzer_re_user_id_b75419_idx'),
        ),
        migrations.AddIndex(
            model_name='resumeanalysis',
            index=models.Index(fields=['resume', '-created_at'], name='analyzer_re_resume__4d0bcc_idx'),
        ),
        migrations.AddIndex(
            model_name='resumeanalysis',
            index=models.Index(fields=['status'], name='analyzer_re_status_ede327_idx'),
        ),
    ]
